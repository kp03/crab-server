generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Rider {
  name            String?
  id              String   @id @default(uuid())
  gender          String?
  phone           String   @unique
  password        String?
  avatar          String?
  rating          Rating[]
  trip            Trip[]
  isVip           Boolean  @default(false)
  riderLocation   RiderLocation? @relation(fields: [riderLocationID], references: [id])
  riderLocationID String?         @unique
  refresh_token   String?
  firebase_token  String?
  device_token    String?
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt
}

model RiderLocation {
  id            String   @id @default(uuid())
  oldLatitude   Float?
  oldLongitude  Float?
  newLatitude   Float?
  newLongitude  Float?
  rider         Rider?
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt
}

model Driver {
  id               String          @id @default(uuid())
  name             String?
  gender           String?
  phone            String          @unique
  password         String
  avatar           String?
  licenseNumber    String?
  status           String?
  verified         Boolean         @default(false)
  cabSeats         Int?
  driverLocation   DriverLocation? @relation(fields: [driverLocationID], references: [id])
  driverLocationID String?         @unique
  rating           Rating[]
  trip             Trip[]
  refresh_token    String?
  firebase_token   String?
  device_token     String?
  created_at       DateTime        @default(now())
  updated_at       DateTime        @updatedAt
}

model DriverLocation {
  id            String   @id @default(uuid())
  oldLatitude   Float?
  oldLongitude  Float?
  newLatitude   Float?
  newLongitude  Float?
  driver        Driver?
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt
}

model Rating {
  id       String  @id @default(uuid())
  feedback String?
  rating   Int
  rider    Rider?  @relation(fields: [riderID], references: [id])
  riderID  String? @unique
  driver   Driver? @relation(fields: [driverID], references: [id])
  driverID String? @unique
  trip     Trip?   @relation(fields: [tripID], references: [id])
  tripID   String? @unique
}

model Trip {
  id          String   @id @default(uuid())
  status      String
  sourceLat   Float
  sourceLong  Float
  source      String
  destLat     Float
  destLong    Float
  destination String
  distance    Float
  cabSeats    Int
  date        DateTime
  rider       Rider?   @relation(fields: [riderID], references: [id])
  riderID     String? 
  rating      Rating?
  driver      Driver?  @relation(fields: [driverID], references: [id])
  driverID    String?  @unique
  trip_length Float?
  trip_cost   Float?
  payment     Payment? @relation(fields: [paymentID], references: [id])
  paymentID   String?  @unique
}

model Payment {
  id         String   @id @default(uuid())
  method     String
  amount     Float
  trip       Trip?
  tripID     String?  @unique
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Caller {
  id            String   @id @default(uuid())
  first_name    String?
  last_name     String?
  gender        String?
  email         String   @unique
  phone         String   @unique
  password      String
  refresh_token String?
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt
}

model Admin {
  id            String   @id @default(uuid())
  name          String?
  email         String   @unique
  phone         String   @unique
  avatar        String?
  password      String
  refresh_token String?
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt
}
